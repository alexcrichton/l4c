//test return 92

int abs(int a) {
	if(a >= 0) return a;
	return -a;
}

bool safe(int x, int y, int r0,
                        int r1,
                        int r2,
                        int r3,
                        int r4,
                        int r5,
                        int r6,
                        int r7) {
	while(true) {
		if(0 >= y) break; if(r0 == x || abs(r0 - x) == abs(0 - y)) return false;
		if(1 >= y) break; if(r1 == x || abs(r1 - x) == abs(1 - y)) return false;
		if(2 >= y) break; if(r2 == x || abs(r2 - x) == abs(2 - y)) return false;
		if(3 >= y) break; if(r3 == x || abs(r3 - x) == abs(3 - y)) return false;
		if(4 >= y) break; if(r4 == x || abs(r4 - x) == abs(4 - y)) return false;
		if(5 >= y) break; if(r5 == x || abs(r5 - x) == abs(5 - y)) return false;
		if(6 >= y) break; if(r6 == x || abs(r6 - x) == abs(6 - y)) return false;
		if(7 >= y) break; if(r6 == x || abs(r6 - x) == abs(7 - y)) return false;
		break;
	}  
	return true;
}

int try(int n, int r0,
               int r1,
               int r2,
               int r3,
               int r4,
               int r5,
               int r6,
               int r7) {
	int i;
	int count = 0;
	if(n == 8) return 1; 
	/* You are now arraying manually */
	for(i = 0; i < 8; i++) {
		if(safe(i, n, r0, r1, r2, r3, r4, r5, r6, r7)) {
			     if(n == 0) { count += try(n+1,  i, r1, r2, r3, r4, r5, r6, r7); }
			else if(n == 1) { count += try(n+1, r0,  i, r2, r3, r4, r5, r6, r7); }
			else if(n == 2) { count += try(n+1, r0, r1,  i, r3, r4, r5, r6, r7); }
			else if(n == 3) { count += try(n+1, r0, r1, r2,  i, r4, r5, r6, r7); }
			else if(n == 4) { count += try(n+1, r0, r1, r2, r3,  i, r5, r6, r7); }
			else if(n == 5) { count += try(n+1, r0, r1, r2, r3, r4,  i, r6, r7); }
			else if(n == 6) { count += try(n+1, r0, r1, r2, r3, r4, r5,  i, r7); }
			else if(n == 7) { count += try(n+1, r0, r1, r2, r3, r4, r5, r6,  i); }
		}
	}
	return count;
}

int t(int _t) {
	return try(_t, -1, -1, -1, -1, -1, -1, -1, -1);
}

int main() {
	int _t = 0;
	return t(_t);
}
