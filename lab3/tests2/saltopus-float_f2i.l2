//test return 3141592

/* An adapted version of a really riced out implementation of
 * float_f2i from 213 datalab. The original only used 4 ops
 * (-, |, <<, >>) and did basically all of its equality testing
 * with switch. We don't have that, so i converted it to use
 * integers. */

int main()
{
	int uf = 0x4a3fbf63;
/*
	* deal with NaN and infinity *
	switch (uf & 0x7F800000) {
	case 0x7F800000:
		return 0x80000000;
	}

	exponent = ((uf & 0x7F800000) >> 23) - 127;
	fraction = (uf & 0x007FFFFF) | 0x00800000;

	if (exponent < 0)
		return 0;

	* deal with big values *
	if (exponent >= 31)
		return 0x80000000;

	* shift the fraction as needed *
	shift = exponent - 23;
	if (shift >= 0)
		integer = fraction << shift;
	else
		integer = fraction >> -shift;

	* deal with sign *
	if (uf & 0x80000000)
		integer = -integer;
	
	return integer;
	*/

	int left = 0;
	int right = 0;
	int shift = 0;
	int minus = 0;
	int and = 0;
	int or = 0;
	int rsh = 0;
	int lsh = 0;

	int exponent = 0;
	int shift_amt = 0;
	int fraction = 0;
	int integer = 0;
	int neg_testing = 0;
	int neg_test_in = 0;
	bool negative = false;

	int neg_one = 0;
	int or_phase = 0;
	int or_x = 0;
	int or_y = 0;
	int not_x = 0;
	int not_y = 0;

	int phase = 0;
	
	while (true) {
		minus = left - right;
		and = left & right;
		rsh = left >> shift;
		lsh = left << shift;

		/* do testing for negatives (test neg_test_in)
		 * negative will be -1 if neg_test_in negative, else 0 */
		if (neg_testing == 0) {
		} else if (neg_testing == 1) {
			left = neg_test_in;
			shift = 31;
			neg_testing = 2;
			continue;
		} else if (neg_testing == 2) {
			negative = rsh != 0;
			neg_testing = 0;
		}

		/* we have one | we need to do.
		 * | can be expressed in terms of ~ and & by DeMorgan's laws,
		 * and ~ can be expressed in terms of constants and
		 * subtraction.
		 *  int neg_one = 0-1;
		 * 	int not_x = 0-(x-neg_one);
		 *  int not_y = 0-(y-neg_one);
		 *  and 0-((not_x & not_y)-neg_one);
		 *
		 *  As it turns out, this was actually really stupid.
		 *  We could have just used + instead, which can be simulated
		 *  by - more easily.
		 */
		if (or_phase == 0) {
		} else if (or_phase == 1) {
			or_x = left;
			or_y = right;
			left = 0;
			right = 1;
			or_phase = 2;
			continue;
		} else if (or_phase == 2) {
			neg_one = minus;
			left = or_x;
			right = neg_one;
			or_phase = 3;
			continue;
		} else if (or_phase == 3) {
			left = 0;
			right = minus;
			or_phase = 4;
			continue;
		} else if (or_phase == 4) {
			not_x = minus;
			left = or_y;
			right = neg_one;
			or_phase = 5;
			continue;
		} else if (or_phase == 5) {
			left = 0;
			right = minus;
			or_phase = 6;
			continue;
		} else if (or_phase == 6) {
			not_y = minus;
			left = not_x;
			right = not_y;
			or_phase = 7;
			continue;
		} else if (or_phase == 7) {
			left = and;
			right = neg_one;
			or_phase = 8;
			continue;
		} else if (or_phase == 8) {
			left = 0;
			right = minus;
			or_phase = 9;
			continue;
		} else if (or_phase == 9) {
			or = minus;
			or_phase = 0;
		}			
		
	    if (phase == 0) {
			/* deal with NaN and infinity */
			/* uf & 0x7F800000 */
			left = uf;
			right = 0x7F800000;
			phase = 1;
		} else if (phase == 1) {
			/* now test that last bit */
			if (and == 0x7F800000) {
				return 0x80000000;
			}

			/* it looks like that we haven't bailed, so we want to
			 * find the exponent now. shift that last bit by 23. */
			left = and;
			shift = 23;
			phase = 2;
		} else if (phase == 2) {
			/* now subtract 127 to get exponent */
			left = rsh;
			right = 127;
			phase = 3;
		} else if (phase == 3) {
			exponent = minus;
			/* now start getting the fraction */
			left = uf;
			right = 0x007FFFFF;
			phase = 4;
		} else if (phase == 4) {
			left = and;
			right = 0x00800000;
			or_phase = 1;
			phase = 5;
		} else if (phase == 5) {
			fraction = or;
			/* now test (exponent < 0) */
			neg_test_in = exponent;
			neg_testing = 1;
			phase = 6;
		} else if (phase == 6) {
			if (negative)
				return 0;
			/* start dealing with big values
			 * if (exponent >= 31) return 0x80000000
			 * if (exponent - 31 >= 0) return 0x80000000 */
			left = exponent;
			right = 31;
			phase = 7;
		} else if (phase == 7) {
			neg_test_in = minus;
			neg_testing = 1;
			phase = 8;
		} else if (phase == 8) {
			if (negative) { } else {
				return 0x80000000;
			}
			/* now figure out our shift amount */
			left = exponent;
			right = 23;
			phase = 9;
		} else if (phase == 9) {
			shift_amt = minus;
			/* now check whether the shift is negative */
			neg_test_in = shift_amt;
			neg_testing = 1;
			phase = 10;
		} else if (phase == 10) {
			/* invert the shift amount if it is negative */
			if (negative) {
				left = 0;
				right = shift_amt;
			}
			phase = 11;
		} else if (phase == 11) {
			if (negative) {
				shift_amt = minus;
			}
			left = fraction;
			shift = shift_amt;
			phase = 12;
		} else if (phase == 12) {
			if (negative) {
				integer = rsh;
			} else {
				integer = lsh;
			}

			/* test sign bit */
			left = uf;
			right = 0x80000000;
			phase = 13;
		} else if (phase == 13) {
			/* if the sign bit is clear, we are done
			   otherwise we still need to negate */
			if (and != 0) { } else {
				return integer;
			}
			left = 0;
			right = integer;
			phase = 14;
		} else if (phase == 14) {
			integer = minus;
			return integer;
		}			
	}
	
	return 0;
}
