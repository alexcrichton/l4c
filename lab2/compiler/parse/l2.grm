(* L2 Compiler
 * L2 grammar
 * Author: Kaustuv Chaudhuri <kaustuv+@cs.cmu.edu>
 * Modified: Frank Pfenning <fp@cs.cmu.edu>
 *
 * Modified: Anand Subramanian <asubrama@andrew.cmu.edu> Fall 2010
 * Now conforms to the L1 fragment of C0
 *)

structure A = Ast

(* for simplicity, we only mark expressions, not statements *)

(* mark e with region (left, right) in source file *)
fun mark (e, (left, right)) = A.Marked (Mark.mark' (e, ParseState.ext (left, right)))
fun marks (s, (left, right)) = A.Markeds (Mark.mark' (s, ParseState.ext (left, right)))

(* expand_asnop (id, "op=", exp) region = "id = id op exps"
 * or = "id = exp" if asnop is "="
 * syntactically expands a compound assignment operator
 *)
fun expand_asnop (id, NONE, exp) (left, right) =
      A.Assign(id, exp)
  | expand_asnop (id, SOME(oper), exp) (left, right) =
      A.Assign(id, mark(A.BinaryOp(oper, A.Var(id), exp), (left, right)))

fun check_main (sym, lpos, rpos) prog =
      if (Symbol.name sym) = "main" then
        prog
      else
        (ErrorMsg.error (ParseState.ext (lpos, rpos))
                         "Function must be called main"; prog)

%%
%header (functor L1LrValsFn (structure Token : TOKEN))

%term
   EOF
 | SEMI
 | INTCONST of Word32.word
 | IDENT    of Symbol.symbol
 | TRUE | FALSE
 | INT | BOOL
 | PLUS | MINUS | STAR | SLASH | PERCENT
 | PLUSPLUS | MINUSMINUS
 | AND | PIPE | BANG | CARET | LSHIFT | RSHIFT | TILDE
 | ANDAND | PIPEPIPE | EQUALS | NEQUALS
 | ASSIGN | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ
 | XOREQ | ANDEQ | OREQ | LSHIFTEQ | RSHIFTEQ
 | LESS | LESSEQ | GREATER | GREATEREQ
 | LBRACE | RBRACE
 | LPAREN | RPAREN
 | IF | ELSE | WHILE | FOR | CONTINUE | BREAK | RETURN
 | QUESTION | COLON
 | UNARY | ASNOP
(* UNARY and ASNOP are dummy terminals.
 * We need dummy terminals if we wish to assign a precedence
 * to a rule that does not correspond to the precedence of
 * the rightmost terminal in that rule.
 * Implicit in this is that precedence can only be infered
 * terminals. Therefore, don't try to assign precedence to "rules"
 *)

%nonterm
   program  of A.program
 | stmts    of A.stm
 | decl     of A.stm
 | stmt     of A.stm
 | lvalue   of A.ident
 | simp     of A.stm
 | control  of A.stm
 | block    of A.stm
 | exp      of A.exp
 | asnop    of A.binop option
 | binop    of A.binop
 | unop     of A.unop
 | postop   of A.binop
 | simpopt  of A.stm
 | elseopt  of A.stm
 | typ      of A.typ

%verbose       (* print summary of errors *)
%pos int       (* positions *)
%start program (* what is the top-most non-terminal expected to be ? *)
%eop EOF       (* which terminal ends parsing? *)
%noshift EOF   (* we should never shift an EOF *)

%name L2

(* The precedence grows down! *)
%left PLUS MINUS
%left STAR SLASH PERCENT
%right UNARY
%left LPAREN

%%

(* note that MAIN is not intended to be a keyword.
 * the current rule is an expedient hack for forward compatability *)
program    : INT IDENT LPAREN RPAREN block
                                      (check_main (IDENT, IDENTleft, IDENTright)
                                                  block)

block      : LBRACE stmts RBRACE        (stmts)

typ        : INT                        (A.INT)
           | BOOL                       (A.BOOL)

stmts      :                                 (A.Nop)
           | typ IDENT SEMI stmts            (A.Declare (IDENT, typ, stmts))
           | typ IDENT ASSIGN exp SEMI stmts (A.Declare (IDENT, typ,
                                                A.Seq(A.Assign(IDENT, exp),
                                                      stmts)))
           | stmt stmts                      (A.Seq (stmt, stmts))

stmt       : simp SEMI                  (marks (simp, (simpleft, simpright)))
           | control                    (marks (control, (controlleft,
                                                          controlright)))
           | block                      (marks (block, (blockleft, blockright)))

simp       : lvalue asnop exp %prec ASNOP
                                       (expand_asnop (lvalue, asnop, exp)
                                                     (lvalueleft, expright))
           | lvalue postop            (A.Assign(lvalue,
                                       mark (A.BinaryOp(postop, A.Var(lvalue),
                                                A.Const(Word32.fromInt 1)),
                                             (lvalueleft, lvalueright))))

simpopt    :                           (A.Nop)
           | simp                      (marks (simp, (simpleft, simpright)))

elseopt    :                           (A.Nop)
           | ELSE stmt                 (marks (stmt, (ELSEleft, stmtright)))

control    : IF LPAREN exp RPAREN stmt elseopt  (A.If(exp, stmt, elseopt))
           | WHILE LPAREN exp RPAREN stmt       (A.While (exp, stmt))
           | FOR LPAREN simpopt SEMI exp SEMI simpopt RPAREN stmt
                                          (A.For (simpopt, exp, simpopt, stmt))
           | CONTINUE SEMI   (marks (A.Continue, (CONTINUEleft, CONTINUEright)))
           | BREAK SEMI      (marks (A.Break, (BREAKleft, BREAKright)))
           | RETURN exp SEMI (A.Return exp)

lvalue     : IDENT                      (IDENT)
           | LPAREN lvalue RPAREN       (lvalue)

exp        : LPAREN exp RPAREN          (exp)
           | INTCONST                   (mark (A.Const(INTCONST),
                                               (INTCONSTleft,INTCONSTright)))
           | IDENT                      (mark (A.Var(IDENT),
                                               (IDENTleft,IDENTright)))
           | TRUE                       (mark (A.Bool(true),
                                               (TRUEleft, TRUEright)))
           | FALSE                      (mark (A.Bool(false),
                                               (FALSEleft, FALSEright)))
           | unop exp %prec UNARY       (mark (A.UnaryOp(unop, exp),
                                               (unopleft, expright)))
           | exp binop exp              (mark (A.BinaryOp (binop, exp1, exp2),
                                               (exp1left,exp2right)))
           | exp QUESTION exp COLON exp (mark (A.Ternary (exp1, exp2, exp3),
                                                  (exp1left, exp3right)))

asnop      : ASSIGN                     (NONE)
           | PLUSEQ                     (SOME(A.PLUS))
           | MINUSEQ                    (SOME(A.MINUS))
           | STAREQ                     (SOME(A.TIMES))
           | SLASHEQ                    (SOME(A.DIVIDEDBY))
           | PERCENTEQ                  (SOME(A.MODULO))
           | ANDEQ                      (SOME(A.BAND))
           | XOREQ                      (SOME(A.XOR))
           | OREQ                       (SOME(A.BOR))
           | LSHIFTEQ                   (SOME(A.LSHIFT))
           | RSHIFTEQ                   (SOME(A.RSHIFT))

binop      : PLUS                       (A.PLUS)
           | MINUS                      (A.MINUS)
           | STAR                       (A.TIMES)
           | SLASH                      (A.DIVIDEDBY)
           | PERCENT                    (A.MODULO)
           | LESS                       (A.LESS)
           | LESSEQ                     (A.LESSEQ)
           | GREATER                    (A.GREATER)
           | GREATEREQ                  (A.GREATEREQ)
           | EQUALS                     (A.EQUALS)
           | NEQUALS                    (A.NEQUALS)
           | ANDAND                     (A.LAND)
           | PIPEPIPE                   (A.LOR)
           | AND                        (A.BAND)
           | CARET                      (A.XOR)
           | PIPE                       (A.BOR)
           | LSHIFT                     (A.LSHIFT)
           | RSHIFT                     (A.RSHIFT)

unop       : BANG                       (A.BANG)
           | TILDE                      (A.INVERT)
           | MINUS                      (A.NEGATIVE)

postop     : PLUSPLUS                   (A.PLUS)
           | MINUSMINUS                 (A.MINUS)
