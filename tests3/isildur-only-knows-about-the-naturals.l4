//test return 28
// "big" gains can be made here by inlining pr/pe and moving the array allocation/assignments out of the loop

int f(int n) {
    if (n <= 1) return 1;
    return n * f(n - 1);
}

int pr(int i) {
    int[] arr = alloc_array(int, 41);
    arr[0] = 2;
    arr[1] = 3;
    arr[2] = 5;
    arr[3] = 7;
    arr[4] = 13;
    arr[5] = 17;
    arr[6] = 19;
    arr[7] = 31;
    arr[8] = 61;
    arr[9] = 89;
    arr[10] = 107;
    arr[11] = 127;
    arr[12] = 521;
    arr[13] = 607;
    arr[14] = 1279;
    arr[15] = 2203;
    arr[16] = 2281;
    arr[17] = 3217;
    arr[18] = 4253;
    arr[19] = 4423;
    arr[20] = 9689;
    arr[21] = 9941;
    arr[22] = 11213;
    arr[23] = 19937;
    arr[24] = 21701;
    arr[25] = 23209;
    arr[26] = 44497;
    arr[27] = 86243;
    arr[28] = 110503;
    arr[29] = 132049;
    arr[30] = 216091;
    arr[31] = 756839;
    arr[32] = 859433;
    arr[33] = 1257787;
    arr[34] = 1398269;
    arr[35] = 2976221;
    arr[36] = 3021377;
    arr[37] = 6972593;
    arr[38] = 13466917;
    arr[39] = 20996011;
    arr[40] = 24036583;
    return arr[i];
}

int pe(int p) {
    return (1 << (p - 1)) * ((1 << p) - 1);
}

int main() {
    int a = 4;
    int b = 4;
    int sz = 2 * f(a) + f(b);
    int[] sammich = alloc_array(int, sz);
    for (int i = 0; i < 41; i++) {
        sammich[i] = pe(pr(i));
    }
    return sammich[1];
}
