//test exception 11
int left(int root){
	return root*2+1;
}

int right(int root){
	return (root+1)*2;
}

bool exists(int root,int len){
	return root<len;
}

bool descend(int[] a,int root,int len){
	int left_child=left(root);
	if(exists(left_child,len) && a[root]<a[left_child])
		return true;

	int right_child=right(root);
	if(exists(right_child,len) && a[root]<a[right_child])
		return true;

	return false;
}

// exception happens here ... lt('<') should be leq('<=')
int which(int[] a,int root,int len){
	int left_child=left(root);
	int right_child=right(root);

	if(!exists(left_child,len) || (exists(right_child, len) && a[left_child] <a[right_child]))
		return right_child;

	if(!exists(right_child,len) || (exists(left_child, len) && a[right_child]<a[left_child]))
		return left_child;

	return -1;
}

int swap(int[] a,int i,int j){
	int tmp;
	tmp=a[i];
	a[i]=a[j];
	a[j]=tmp;
	return 0;
}

int sift_down(int[] a,int len,int root){
	while(descend(a,root,len)){
		int child=which(a,root,len);
		swap(a,root,child);
		root=child;
	}
	return 0;
}

int heapify(int[] a,int len){
	int i;
	for(i=len-1;i>=0;i--)
		sift_down(a,len,i);
	return 0;
}

int heap_sort(int[] a,int len) {
	heapify(a,len);
	
	int i;
	for(i=len-1;i>=0;i--) {
		swap(a,0,i);
		sift_down(a,i,0);
	}
	return 0;
}
int[] fill(int len){
	int[] a=alloc_array(int,len);
	
	for(int i=0;i<len;i++)
		a[i]=readint();
	
	return a;
}

int main() {
	int len = readint();
	int[] a=fill(len);
	heap_sort(a, len);
	for (int i = 0; i < len; i++) {
		printint(a[i]);
		printchar(0xa);
	}
	return 0;
}
