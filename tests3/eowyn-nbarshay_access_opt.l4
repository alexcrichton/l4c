//test return -2101427409
//This is an optimization test
//Can you optimize redundant expressions with array access?

int main(){

	int a1 = 1;
	int a2 = 2;
	int a3 = 3;
	int a4 = 4;
	int a5 = 5;
	int a6 = 6;
	int a7 = 7;
	int a8 = 8;
	int a9 = 9;
	int a10 = 10;

	int[] A = alloc_array(int, 1000);
	A[0] = 1;
	for(int i = 1; i < 1000; i++) {
		A[i] = A[i-1]*2;
	}


	for(int i = 0; i < 1250000; i++){
		a1 += a2 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a2 += a3 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a3 += a4 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a4 += a5 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a5 += a6  + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a6 += a7 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a7 += a8 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a8 += a9 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a9 += a10 + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
		a10 += i + (A[i % 1000] * A[(i + 1) % 1000] + A[(i + 2) % 1000] * A[(i+ 3) % 1000]);
	}

	
	return a1;
}
