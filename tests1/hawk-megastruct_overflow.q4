//test return 0

// an extraordinarily large struct, so that the last address in it wraps around
// uses 2^64 + 4 bytes
// only interesting for well-packed structs


/*
-- lua script used to generate structs and dereference included for reference

for i=1,62
do
    print ("struct level" .. i)
    print ("{")
    print ("\tstruct level" .. (i - 1) .. " entry0;")
    print ("\tstruct level" .. (i - 1) .. " entry1;")
    print ("};")
    print ()
end

for i=62,1,-1
do
    print ("\t\t.entry1 // " .. i)
end

*/

struct level0
{
    int uses_four_bytes;
};

struct level1
{
	struct level0 entry0;
	struct level0 entry1;
};

struct level2
{
	struct level1 entry0;
	struct level1 entry1;
};

struct level3
{
	struct level2 entry0;
	struct level2 entry1;
};

struct level4
{
	struct level3 entry0;
	struct level3 entry1;
};

struct level5
{
	struct level4 entry0;
	struct level4 entry1;
};

struct level6
{
	struct level5 entry0;
	struct level5 entry1;
};

struct level7
{
	struct level6 entry0;
	struct level6 entry1;
};

struct level8
{
	struct level7 entry0;
	struct level7 entry1;
};

struct level9
{
	struct level8 entry0;
	struct level8 entry1;
};

struct level10
{
	struct level9 entry0;
	struct level9 entry1;
};

struct level11
{
	struct level10 entry0;
	struct level10 entry1;
};

struct level12
{
	struct level11 entry0;
	struct level11 entry1;
};

struct level13
{
	struct level12 entry0;
	struct level12 entry1;
};

struct level14
{
	struct level13 entry0;
	struct level13 entry1;
};

struct level15
{
	struct level14 entry0;
	struct level14 entry1;
};

struct level16
{
	struct level15 entry0;
	struct level15 entry1;
};

struct level17
{
	struct level16 entry0;
	struct level16 entry1;
};

struct level18
{
	struct level17 entry0;
	struct level17 entry1;
};

struct level19
{
	struct level18 entry0;
	struct level18 entry1;
};

struct level20
{
	struct level19 entry0;
	struct level19 entry1;
};

struct level21
{
	struct level20 entry0;
	struct level20 entry1;
};

struct level22
{
	struct level21 entry0;
	struct level21 entry1;
};

struct level23
{
	struct level22 entry0;
	struct level22 entry1;
};

struct level24
{
	struct level23 entry0;
	struct level23 entry1;
};

struct level25
{
	struct level24 entry0;
	struct level24 entry1;
};

struct level26
{
	struct level25 entry0;
	struct level25 entry1;
};

struct level27
{
	struct level26 entry0;
	struct level26 entry1;
};

struct level28
{
	struct level27 entry0;
	struct level27 entry1;
};

struct level29
{
	struct level28 entry0;
	struct level28 entry1;
};

struct level30
{
	struct level29 entry0;
	struct level29 entry1;
};

struct level31
{
	struct level30 entry0;
	struct level30 entry1;
};

struct level32
{
	struct level31 entry0;
	struct level31 entry1;
};

struct level33
{
	struct level32 entry0;
	struct level32 entry1;
};

struct level34
{
	struct level33 entry0;
	struct level33 entry1;
};

struct level35
{
	struct level34 entry0;
	struct level34 entry1;
};

struct level36
{
	struct level35 entry0;
	struct level35 entry1;
};

struct level37
{
	struct level36 entry0;
	struct level36 entry1;
};

struct level38
{
	struct level37 entry0;
	struct level37 entry1;
};

struct level39
{
	struct level38 entry0;
	struct level38 entry1;
};

struct level40
{
	struct level39 entry0;
	struct level39 entry1;
};

struct level41
{
	struct level40 entry0;
	struct level40 entry1;
};

struct level42
{
	struct level41 entry0;
	struct level41 entry1;
};

struct level43
{
	struct level42 entry0;
	struct level42 entry1;
};

struct level44
{
	struct level43 entry0;
	struct level43 entry1;
};

struct level45
{
	struct level44 entry0;
	struct level44 entry1;
};

struct level46
{
	struct level45 entry0;
	struct level45 entry1;
};

struct level47
{
	struct level46 entry0;
	struct level46 entry1;
};

struct level48
{
	struct level47 entry0;
	struct level47 entry1;
};

struct level49
{
	struct level48 entry0;
	struct level48 entry1;
};

struct level50
{
	struct level49 entry0;
	struct level49 entry1;
};

struct level51
{
	struct level50 entry0;
	struct level50 entry1;
};

struct level52
{
	struct level51 entry0;
	struct level51 entry1;
};

struct level53
{
	struct level52 entry0;
	struct level52 entry1;
};

struct level54
{
	struct level53 entry0;
	struct level53 entry1;
};

struct level55
{
	struct level54 entry0;
	struct level54 entry1;
};

struct level56
{
	struct level55 entry0;
	struct level55 entry1;
};

struct level57
{
	struct level56 entry0;
	struct level56 entry1;
};

struct level58
{
	struct level57 entry0;
	struct level57 entry1;
};

struct level59
{
	struct level58 entry0;
	struct level58 entry1;
};

struct level60
{
	struct level59 entry0;
	struct level59 entry1;
};

struct level61
{
	struct level60 entry0;
	struct level60 entry1;
};

struct level62
{
	struct level61 entry0;
	struct level61 entry1;
	int beyond_the_impossible;
};

int main() {
	struct level62 *elephantine = alloc (struct level62);
	int x = elephantine -> beyond_the_impossible;
	return x;
}
