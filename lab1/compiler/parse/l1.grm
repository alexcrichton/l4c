(* L1 Compiler
 * L1 grammar
 * Author: Kaustuv Chaudhuri <kaustuv+@cs.cmu.edu>
 * Modified: Frank Pfenning <fp@cs.cmu.edu>
 *
 * Modified: Anand Subramanian <asubrama@andrew.cmu.edu> Fall 2010
 * Now conforms to the L1 fragment of C0
 *)

structure A = Ast

(* for simplicity, we only mark expressions, not statements *)

(* mark e with region (left, right) in source file *)
fun mark (e, (left, right)) = A.Marked (Mark.mark' (e, ParseState.ext (left, right)))
fun marks (s, (left, right)) = A.Markeds (Mark.mark' (s, ParseState.ext (left, right)))

(* expand_asnop (id, "op=", exp) region = "id = id op exps"
 * or = "id = exp" if asnop is "="
 * syntactically expands a compound assignment operator
 *)
fun expand_asnop (id, NONE, exp) (left, right) =
      A.Assign(id, exp)
  | expand_asnop (id, SOME(oper), exp) (left, right) =
      A.Assign(id, mark(A.OpExp(oper, [A.Var(id), exp]), (left, right)))

%%
%header (functor L1LrValsFn (structure Token : TOKEN))

%term
   EOF
 | SEMI
 | INTCONST of Word32.word
 | IDENT    of Symbol.symbol
 | RETURN
 | INT
 | MAIN
 | PLUS | MINUS | STAR | SLASH | PERCENT
 | ASSIGN | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ
 | LBRACE | RBRACE
 | LPAREN | RPAREN
 | UNARY | ASNOP
(* UNARY and ASNOP are dummy terminals.
 * We need dummy terminals if we wish to assign a precedence
 * to a rule that does not correspond to the precedence of
 * the rightmost terminal in that rule.
 * Implicit in this is that precedence can only be infered
 * terminals. Therefore, don't try to assign precedence to "rules"
 *)

%nonterm
   program  of A.decl list * A.stm list
 | decls    of A.decl list
 | decl     of A.decl
 | stmts    of A.stm list
 | stmt     of A.stm
 | simp     of A.stm
 | exp      of A.exp
 | asnop    of A.oper option

%verbose       (* print summary of errors *)
%pos int       (* positions *)
%start program (* what is the top-most non-terminal expected to be ? *)
%eop EOF       (* which terminal ends parsing? *)
%noshift EOF   (* we should never shift an EOF *)

%name L1

(* The precedence grows down! *)
%left PLUS MINUS
%left STAR SLASH PERCENT
%right UNARY
%left LPAREN

%%

(* note that MAIN is not intended to be a keyword.
 * the current rule is an expedient hack for forward compatability *)
program    : INT IDENT LPAREN RPAREN LBRACE decls stmts RBRACE
                                      (check_main (IDENT, IDENTleft, IDENTright)
                                                  (decls, stmts))

decls      :                            (nil)
           | decl decls                 (decl::decls)

decl       : INT IDENT SEMI             (A.Decl IDENT)
           | INT IDENT ASSIGN exp SEMI  (A.Init (IDENT, exp))

stmts      :                            ([])
           | stmt stmts                 (stmt :: stmts)

stmt       : simp SEMI                  (marks (simp, (simpleft, simpright)))
           | RETURN exp SEMI            (marks ((A.Return exp), (RETURNleft, expright)))

lvalue     : IDENT                      (IDENT)
           | LPAREN lvalue RPAREN       (lvalue)
simp       : lvalue asnop exp %prec ASNOP
                                        (expand_asnop (lvalue, asnop, exp) (lvalueleft, expright))

exp        : LPAREN exp RPAREN          (exp)
           | INTCONST                   (mark (A.ConstExp(INTCONST),(INTCONSTleft,INTCONSTright)))
           | IDENT                      (mark (A.Var(IDENT), (IDENTleft,IDENTright)))
           | exp PLUS exp               (mark (A.OpExp (A.PLUS, [exp1,exp2]), (exp1left,exp2right)))
           | exp MINUS exp              (mark (A.OpExp (A.MINUS, [exp1,exp2]), (exp1left,exp2right)))
           | exp STAR exp               (mark (A.OpExp (A.TIMES, [exp1,exp2]), (exp1left,exp2right)))
           | exp SLASH exp              (mark (A.OpExp (A.DIVIDEDBY, [exp1,exp2]), (exp1left,exp2right)))
           | exp PERCENT exp            (mark (A.OpExp (A.MODULO, [exp1,exp2]), (exp1left,exp2right)))
           | MINUS exp %prec UNARY      (mark (A.OpExp (A.NEGATIVE, [exp]), (MINUSleft,expright)))

asnop      : ASSIGN                     (NONE)
           | PLUSEQ                     (SOME(A.PLUS))
           | MINUSEQ                    (SOME(A.MINUS))
           | STAREQ                     (SOME(A.TIMES))
           | SLASHEQ                    (SOME(A.DIVIDEDBY))
           | PERCENTEQ                  (SOME(A.MODULO))
