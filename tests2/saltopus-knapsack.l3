//test return 15

typedef int _;
typedef bool _00_;

_00_ __________(_ __, _ ___);


_ ___(_ _______)
{
	_ __ = 2; 
	_ ___ = __ / __; 
	_ ____ = __ - __;
	_ _____ = ___ + __;
	_ ______ = __ + __;
	if (__________(_______, ____)) {
		return ______;
	} else if (__________(_______, ___)) {
		return __;
	} else if (__________(_______, __)) {
		return __;
	} else if (__________(_______, _____)) {
		return ___;
	} else if (__________(_______, ______)) {
		return ___ + ____ + _____ + __ + ______;
	} else {
		return __ / ____;
	}
}
_ __(_ _______)
{
	_ __ = 2; 
	_ ___ = __ / __;
	_ ____ = __ - ___ - __ + ___;
	_ _____ = ___ + __; 
	_ ______ = __ + __;
	if (__________(_______, ____)) {
		return __ * _____ * (______ - __);
	} else if (__________(_______, ___)) {
		return __;
	} else if (__________(_______, __)) {
		return ___;
	} else if (__________(_______, _____)) {
		return ___;
	} else if (__________(_______, ______)) {
		return ______;
	} else {
		return __ / ____;
	}
}

_ _____(_ __, _ ___) {
	return (__ >= ___) ? __ : ___;
}
_ ____(_ __________, _ _________) {
	_ ______ = __________ - 1;
	_ _______ = ______ - __________ + 1;
	_ ________;
	if(__________ == _______) return _______;
	________ = ____(______, _________);
	if(__(______) > _________) {
		return ________;
	} else {
		return _____(___(______) + ____(______, _________ - __(______)), ________); 
	}
}

_00_ __________(_ __, _ ___) {
	return __ == ___;
}

_ main() {
	_ __ = 4;
	return ____(__ + __ / __, __ * __ - __ / __);
}
