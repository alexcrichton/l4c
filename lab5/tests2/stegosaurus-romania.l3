//test return 418

/* Find the shortest path from Arad to Bucharest in at most n steps */

int Timisoara(int steps);
int RimnicuVilcea(int steps);
int Arad(int steps);
int Dobreta(int steps);
int Pitesti(int steps);
int Craiova(int steps);
int Eforie(int steps);
int Hirsova(int steps);
int Fagaras(int steps);
int Sibiu(int steps);
int Vaslui(int steps);
int Giurgiu(int steps);
int Zerind(int steps);
int Iasi(int steps);
int Mehadia(int steps);
int Lugoj(int steps);
int Oradea(int steps);
int Neamt(int steps);
int Urziceni(int steps);
int Bucharest(int steps);

int main() {
	int n = 10;
	return Arad(n);
}

int choose(int x, int y) {
	if (x == -1 && y == -1) return -1;
	if (x == -1) return y;
	if (y == -1) return x;
	return x < y ? x : y;
}

int Timisoara(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Arad(steps-1);
	if (ret > -1) ret += 118;
	n = choose(n, ret);
	ret = Lugoj(steps-1);
	if (ret > -1) ret += 111;
	n = choose(n, ret);
	return n;
}

int RimnicuVilcea(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Craiova(steps-1);
	if (ret > -1) ret += 146;
	n = choose(n, ret);
	ret = Sibiu(steps-1);
	if (ret > -1) ret += 80;
	n = choose(n, ret);
	ret = Pitesti(steps-1);
	if (ret > -1) ret += 97;
	n = choose(n, ret);
	return n;
}

int Arad(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Zerind(steps-1);
	if (ret > -1) ret += 75;
	n = choose(n, ret);
	ret = Timisoara(steps-1);
	if (ret > -1) ret += 118;
	n = choose(n, ret);
	ret = Sibiu(steps-1);
	if (ret > -1) ret += 140;
	n = choose(n, ret);
	return n;
}

int Dobreta(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Mehadia(steps-1);
	if (ret > -1) ret += 75;
	n = choose(n, ret);
	ret = Craiova(steps-1);
	if (ret > -1) ret += 120;
	n = choose(n, ret);
	return n;
}

int Pitesti(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = RimnicuVilcea(steps-1);
	if (ret > -1) ret += 97;
	n = choose(n, ret);
	ret = Craiova(steps-1);
	if (ret > -1) ret += 138;
	n = choose(n, ret);
	ret = Bucharest(steps-1);
	if (ret > -1) ret += 101;
	n = choose(n, ret);
	return n;
}

int Craiova(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Dobreta(steps-1);
	if (ret > -1) ret += 120;
	n = choose(n, ret);
	ret = RimnicuVilcea(steps-1);
	if (ret > -1) ret += 146;
	n = choose(n, ret);
	ret = Pitesti(steps-1);
	if (ret > -1) ret += 138;
	n = choose(n, ret);
	return n;
}

int Eforie(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Hirsova(steps-1);
	if (ret > -1) ret += 86;
	n = choose(n, ret);
	return n;
}

int Hirsova(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Urziceni(steps-1);
	if (ret > -1) ret += 98;
	n = choose(n, ret);
	ret = Eforie(steps-1);
	if (ret > -1) ret += 86;
	n = choose(n, ret);
	return n;
}

int Fagaras(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Sibiu(steps-1);
	if (ret > -1) ret += 99;
	n = choose(n, ret);
	ret = Bucharest(steps-1);
	if (ret > -1) ret += 211;
	n = choose(n, ret);
	return n;
}

int Sibiu(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = RimnicuVilcea(steps-1);
	if (ret > -1) ret += 80;
	n = choose(n, ret);
	ret = Arad(steps-1);
	if (ret > -1) ret += 140;
	n = choose(n, ret);
	ret = Oradea(steps-1);
	if (ret > -1) ret += 151;
	n = choose(n, ret);
	ret = Fagaras(steps-1);
	if (ret > -1) ret += 99;
	n = choose(n, ret);
	return n;
}

int Vaslui(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Urziceni(steps-1);
	if (ret > -1) ret += 142;
	n = choose(n, ret);
	ret = Iasi(steps-1);
	if (ret > -1) ret += 92;
	n = choose(n, ret);
	return n;
}

int Giurgiu(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Bucharest(steps-1);
	if (ret > -1) ret += 90;
	n = choose(n, ret);
	return n;
}

int Zerind(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Oradea(steps-1);
	if (ret > -1) ret += 71;
	n = choose(n, ret);
	ret = Arad(steps-1);
	if (ret > -1) ret += 75;
	n = choose(n, ret);
	return n;
}

int Iasi(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Vaslui(steps-1);
	if (ret > -1) ret += 92;
	n = choose(n, ret);
	ret = Neamt(steps-1);
	if (ret > -1) ret += 87;
	n = choose(n, ret);
	return n;
}

int Mehadia(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Lugoj(steps-1);
	if (ret > -1) ret += 70;
	n = choose(n, ret);
	ret = Dobreta(steps-1);
	if (ret > -1) ret += 75;
	n = choose(n, ret);
	return n;
}

int Lugoj(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Timisoara(steps-1);
	if (ret > -1) ret += 111;
	n = choose(n, ret);
	ret = Mehadia(steps-1);
	if (ret > -1) ret += 70;
	n = choose(n, ret);
	return n;
}

int Oradea(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Zerind(steps-1);
	if (ret > -1) ret += 71;
	n = choose(n, ret);
	ret = Sibiu(steps-1);
	if (ret > -1) ret += 151;
	n = choose(n, ret);
	return n;
}

int Neamt(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Iasi(steps-1);
	if (ret > -1) ret += 87;
	n = choose(n, ret);
	return n;
}

int Urziceni(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	ret = Bucharest(steps-1);
	if (ret > -1) ret += 85;
	n = choose(n, ret);
	ret = Hirsova(steps-1);
	if (ret > -1) ret += 98;
	n = choose(n, ret);
	ret = Vaslui(steps-1);
	if (ret > -1) ret += 142;
	n = choose(n, ret);
	return n;
}

int Bucharest(int steps) {
	int n = -1;
	int ret;
	if (steps == 0) return -1;
	return 0;
}

