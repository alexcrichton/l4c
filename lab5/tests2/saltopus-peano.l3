//test return 624

/******************************************************************/
/* Does a bunch of noob arithmetic. Modeled after the presentation
 * of arithmetic in The Little Schemer. */
int add1(int n) { return n+1; }
int sub1(int n) { return n == 0 ? n/n : n - 1; }
bool iszero(int n) { return n == 0; }

int plus(int n, int m) {
	return iszero(n) ? m : add1(plus(sub1(n), m));
}
int minus(int n, int m) {
	return iszero(m) ? n : sub1(minus(n, sub1(m)));
}
int times(int n, int m) {
	return iszero(m) ? 0 : plus(n, times(n, sub1(m)));
}

bool gt(int n, int m) {
	return iszero(n) ? false : (iszero(m) || gt(sub1(n), sub1(m)));
}
bool lt(int n, int m) {
	return gt(m, n);
}
bool eq(int n, int m) {
	return !gt(n, m) && !lt(n, m);
}

int power(int n, int m) {
	return iszero(m) ? 1 : times(n, power(n, sub1(m)));
}

int quotient(int n, int m) {
	return lt(n, m) ? 0 : add1(quotient(minus(n, m), m));
}

bool odd(int n);
bool even(int n) {
	return iszero(n) ? true : odd(sub1(n));
}
bool odd(int n) {
	return iszero(n) ? false : even(sub1(n));
}
/******************************************************************/

int main() {
	int x = plus(43, times(17, 2));
	int y = quotient(x, 3);
	int z = power(y, 2);

	int w = odd(z) ? sub1(z) : add1(z);
	
	return w;
}
