//test return -1430783794

/*
 * Implementation of a simulator for the Universal Machine (UM) for
 * the 2006 ICFP Programming Contest.
 * See: http://www.boundvariable.org/index.shtml
 *      http://www.boundvariable.org/um-spec.txt
 * 
 * This has been ported over from a C version that I wrote.
 *
 * Since we don't have input/output, the output is CRCed and that is
 * returned.
 * 
 * The test is based on a modified (shorter) version of sandmark.umz
 * test from the site. The test was written in ML and compiled to UM
 * assembly. The test program is read in from stdin; the maximum file
 * length is hardcoded in.
 *
 * My original C version was much simpler because I didn't need to
 * deal with any of the array indexing stuff. I just malloc()ed up
 * buffers and cast them.
 *
 * -Michael Sullivan
 */

/*************************************************************************/
// We use an adler checksum to see if the output is correct.
struct cksum_state_t {
	int a;
	int b;
};
typedef struct cksum_state_t cksum_state;

cksum_state *cksum_start() {
	return alloc(cksum_state);
}
cksum_state *cksum_update(cksum_state *s, int data) {
	s->a = (s->a + data) % 65521;
	s->b = (s->b + s->a) % 65521;
	return s;
}
int cksum_finish(cksum_state *s) {
	return (s->b << 16) | s->a;
}
/*************************************************************************/



/*************************************************************************/
/* Some functions for unsigned math in terms of signed integers.
 * Modified from:
 * http://www.cs.princeton.edu/introcs/51data/UnsignedDivision.java.html */

// is a >= b when viewed as unsigned int
bool geq(int a, int b) {
	if (b < 0 && a >= 0) return false;
	if (a < 0 && b >= 0) return true;
	return a >= b;
}

int unsigned_div(int num, int den) {
	int q = num;   // quotient
	int r = 0;     // remainder
	int i;
	if (den == 0) return num / den; /* fail with div by 0 */

	for (i = 0; i < 32; i++) {
		r <<= 1;
		if (q < 0) r++;
		q <<= 1;
		// important to do comparison as if they're unsigned
		if (geq(r, den)) { 
			q++;
			r -= den;
		}
	}
	return q;
}
/*************************************************************************/

/* Now the real stuff */

int[] read_program();

int crash()
{
	return 5 / 0;
}

int copy(int[] dest, int[] src, int length)
{
	int i;
	for (i = 0; i < length; i++) {
		dest[i] = src[i];
	}
	return 0;
}


int main()
{
	cksum_state *s = cksum_start();
	int num_arrays = 100000; /* The maximum number of arrays */

	/* Tracking information for allocated arrays. */
	int next_unallocated = 1; /* the slot in array not yet allocated. */
	int next_free = -1; /* the first thing in free_slots */
	int[][] array;
	int[] free_slots;
	int[] zero_array;

	int[] regs = alloc_array(int, 8);
	
	int IP = 0;

	array = alloc_array(int [], num_arrays);
	free_slots = alloc_array(int, num_arrays);
	zero_array = array[0];

	array[0] = read_program();

	while (true) {
		int instr = array[0][IP+1];
		int A = (instr >> 6) & 0x7;
		int B = (instr >> 3) & 0x7;
		int C = instr & 0x7;

		int op = ((instr >> 28) & 0xf);
		IP++;

		/* Really, this ought to be a switch, but we don't have those.
		 * As an optimization, I have sorted the if-block by the
		 * frequency operations are executed in sandmark. */

		if (op == 13) { /* ORTHO */
			regs[(instr >> 25) & 0x7] = (instr & 0x1ffffff);
		} else if (op == 1) { /* INDEX */
			regs[A] = array[regs[B]][regs[C]+1];
		} else if (op == 2) { /* AMEND */
			array[regs[A]][regs[B]+1] = regs[C];
		} else if (op == 12) { /* LOADP */
			if (regs[B] != 0) {
				int[] ray;
				ray = alloc_array(int, array[regs[B]][0]);
				copy(ray, array[regs[B]], array[regs[B]][0]);
				array[0] = ray;
			}
			IP = regs[C];
		} else if (op == 6) { /* NAND */
			regs[A] = ~(regs[B] & regs[C]);
		} else if (op == 0) { /* CMOV */
			if (regs[C] != 0)
				regs[A] = regs[B];
		} else if (op == 3) { /* ADD */
			regs[A] = regs[B] + regs[C];
		} else if (op == 8) { /* ALLOC */
			int idx;
			int[] ray;

			/* find an empty spot */
			if (next_free >= 0) {
				idx = free_slots[next_free];
				next_free--;
			} else {
				idx = next_unallocated;
				next_unallocated++;
			}

			/* alloc the array */
			ray = alloc_array(int, regs[C]+1);
			ray[0] = regs[C]+1;
			array[idx] = ray;
			regs[B] = idx;
		} else if (op == 9) { /* ABANDON */
			next_free++;
			free_slots[next_free] = regs[C];
			array[regs[C]] = zero_array;
		} else if (op == 4) { /* MUL */
			regs[A] = regs[B] * regs[C];
		} else if (op == 5) { /* DIV */
			regs[A] = unsigned_div(regs[B], regs[C]);
		} else if (op == 10) { /* OUT */
			printchar(regs[C]);
			cksum_update(s, regs[C]);
		} else if (op == 7) { /* HALT */
			return cksum_finish(s);
		} else if (op == 11) { /* IN */
			//regs[C] = getchar();
			// We don't really support input.
			regs[C] = -1;
		} else {
			/* this is very bad! cause an abort. */
			crash();
		}
	}

	return 0;
}

int [] read_program() {
	int maximum_length = 16*1024*1024; // kind of a hack
	int [] array = alloc_array(int, maximum_length);
	int i;

	for (i = 0; !eof(); i++) {
		// data is big-endian on disk
		array[i+1] = (readchar() << 24) | (readchar() << 16) | (readchar() << 8) | (readchar());
	}
	array[0] = i;

	return array;
}
