#[link(name = "l4c")];
#[deny(implicit_copies)];
#[deny(non_implicitly_copyable_typarams)];

extern mod std;

use syntax::*;
use core::util::*;
use util::*;
use util::profile::*;

mod syntax {
  mod ast;
  mod pp;
  mod parse;
  mod symbol;
  mod error;
  mod mark;
}
mod util {
  mod profile;
}
mod analysis {
  mod typecheck;
  mod returncheck;
  mod maincheck;
}

fn main() {
  let a = os::args();
  if a.len() == 1 {
    fail(~"need at least one file as an argument");
  }

  let file = copy a[1];
  let {status, out, _} = prof(~"JSON",
                              || run::program_output("parse/parser", [file]));
  if status != 0 {
    io::print(out);
    fail(~"Failed to parse the given file");
  }

  let ast = prof(~"AST", || parse::from_str(out));
  ast.elaborate();

  analysis::typecheck::check(&ast);
  analysis::returncheck::check(&ast);
  analysis::maincheck::check(&ast);

  io::print(ast.pp() + ~"\n");
}
