(* L5 Compiler
 * L5 grammar
 * Author: Alex Crichton <acrichto@andrew.cmu.edu>
 * Author: Robbie McElrath <rmcelrat@andrew.cmu.edu>
 *)

structure A = Ast

(* for simplicity, we only mark expressions, not statements *)

(* mark e with region (left, right) in source file *)
fun mark (e, (left, right)) = A.Marked (Mark.mark' (e, ParseState.ext (left, right)))
fun marks (s, (left, right)) = A.Markeds (Mark.mark' (s, ParseState.ext (left, right)))
fun markg (d, (left, right)) = A.Markedg (Mark.mark' (d, ParseState.ext (left, right)))

fun convert_exp2 (exp1, left) (SOME binop, exp2, NONE, right) =
      mark (A.BinaryOp(binop, exp1, exp2), (left, right))
  | convert_exp2 (exp1, left) (NONE, exp2, SOME exp3, right) =
      mark (A.Ternary(exp1, exp2, exp3, ref A.NULL), (left, right))
  | convert_exp2 _ _ = raise Fail "Invalid input to convert_exp2!"

fun genpost (exp, oper) = A.Assign(exp, oper, A.Const(Word32.fromInt 1))
fun genptrinc (exp, oper) =
  A.Seq (A.Express (A.Deref (exp, ref A.NULL)), genpost (exp, oper))

fun gengdecl ((t, id, L), ext) st = markg ((A.IntDecl (t, id, L, st)), ext)
fun gendef ((t, id, L, stm), ext) st = markg ((A.Fun (t, id, L, stm, st)), ext)

fun typedef (typ, name) ext = (Symbol.addtype name;
                               markg (A.Typedef (name, typ), ext))

fun gendecl (typ, name) exp = A.Declare (name, typ, exp, A.Nop)

%%
%header (functor L5LrValsFn (structure Token : TOKEN))

%term
   EOF
 | SEMI
 | INTCONST of Word32.word
 | IDENT    of Symbol.symbol
 | TYPE     of Symbol.symbol
 | TRUE | FALSE | NULL | ALLOC | ALLOCARR
 | INT | BOOL | STRUCT
 | PLUS | MINUS | STAR | SLASH | PERCENT
 | PLUSPLUS | MINUSMINUS
 | AND | PIPE | BANG | CARET | LSHIFT | RSHIFT | TILDE
 | ANDAND | PIPEPIPE | EQUALS | NEQUALS
 | ASSIGN | PLUSEQ | MINUSEQ | STAREQ | SLASHEQ | PERCENTEQ
 | XOREQ | ANDEQ | OREQ | LSHIFTEQ | RSHIFTEQ
 | LESS | LESSEQ | GREATER | GREATEREQ
 | LBRACE | RBRACE
 | LPAREN | RPAREN
 | COMMA | PERIOD | ARROW | LBRACKET | RBRACKET
 | IF | ELSE | WHILE | FOR | CONTINUE | BREAK | RETURN | TYPEDEF | STATIC
 | QUESTION | COLON
 | UNARY | ASNOP
(* UNARY and ASNOP are dummy terminals.
 * We need dummy terminals if we wish to assign a precedence
 * to a rule that does not correspond to the precedence of
 * the rightmost terminal in that rule.
 * Implicit in this is that precedence can only be inferred
 * terminals. Therefore, don't try to assign precedence to "rules"
 *)

%nonterm
   program  of A.program
 | gdecls   of A.gdecl list
 | gdecl    of A.gdecl
 | fdecl    of (A.typ * A.ident * (A.typ * A.ident) list) * (int * int)
 | fdef     of (A.typ * A.ident * (A.typ * A.ident) list * A.stm) * (int * int)
 | typedef  of A.gdecl
 | sdecl    of A.gdecl
 | sdef     of A.gdecl
 | field    of (A.typ * A.ident)
 | field_list         of (A.typ * A.ident) list
 | param    of (A.typ * A.ident)
 | param_list_follow  of (A.typ * A.ident) list
 | param_list         of (A.typ * A.ident) list
 | arg_list_follow    of A.exp list
 | arg_list           of A.exp list
 | stmts    of A.stm
 | decl     of A.stm
 | stmt     of A.stm
 | simp     of A.stm
 | simpnodef of A.stm
 | simppostop of A.exp * A.binop option
 | control  of A.stm
 | block    of A.stm
 | exp      of A.exp
 | expnostar of A.exp
 | exp2     of A.binop option * A.exp * A.exp option * int
 | asnop    of A.binop option
 | unop     of A.unop
 | postop   of A.binop
 | step     of A.stm
 | simpopt  of A.stm
 | elseopt  of A.stm
 | typ      of A.typ
 | typfun_list_follow of A.typ list
 | typfun_list        of A.typ list
 | typfun             of A.typ * A.ident

%verbose       (* print summary of errors *)
%pos int       (* positions *)
%start program (* what is the top-most non-terminal expected to be ? *)
%eop EOF       (* which terminal ends parsing? *)
%noshift EOF   (* we should never shift an EOF *)
%nodefault     (* ? seems like a good idea ? *)
%pure          (* Apparently has the effect of executing the reduce code as soon
                  as a reduction is possible. *)

%name L5

(* The precedence grows down! *)
%right ASNOP
%right QUESTION COLON
%left PIPEPIPE
%left ANDAND
%left PIPE
%left CARET
%left AND
%left EQUALS NEQUALS
%left LESS LESSEQ GREATER GREATEREQ
%left LSHIFT RSHIFT
%left PLUS MINUS
%left STAR SLASH PERCENT
%right UNARY
%left LPAREN LBRACKET ARROW PERIOD

%%

(* note that MAIN is not intended to be a keyword.
 * the current rule is an expedient hack for forward compatability *)
program    : gdecls                     (gdecls)

gdecls     :                            ([])
           | gdecl gdecls               (gdecl::gdecls)

gdecl      : fdecl                      (gengdecl fdecl false)
           | STATIC fdecl               (gengdecl fdecl true)
           | fdef                       (gendef fdef false)
           | STATIC fdef                (gendef fdef true)
           | typedef SEMI               (typedef)
           | sdecl                      (sdecl)
           | sdef                       (sdef)

fdecl      : typ IDENT param_list SEMI  (((typ, IDENT, param_list),
                                         (typleft, SEMIright)))

fdef       : typ IDENT param_list block (((typ, IDENT, param_list, block),
                                          (typleft, param_listright)))

typedef    : TYPEDEF typ IDENT          (typedef (typ, IDENT)
                                                 (TYPEDEFleft, typright))
           | TYPEDEF typfun             (typedef typfun
                                                 (TYPEDEFleft, typfunright))

param      : typ IDENT                  (typ, IDENT)
           | typfun                     (typfun)

param_list_follow :                                 ([])
                  | COMMA param param_list_follow   (param::param_list_follow)

param_list : LPAREN RPAREN                          ([])
           | LPAREN param param_list_follow RPAREN  (param::param_list_follow)

sdecl      : STRUCT IDENT SEMI          (markg (A.StrDecl IDENT,
                                               (STRUCTleft, SEMIright)))
           | STRUCT TYPE SEMI           (markg (A.StrDecl TYPE,
                                               (STRUCTleft, SEMIright)))

sdef       : STRUCT IDENT LBRACE field_list RBRACE SEMI
                                        (markg (A.Struct (IDENT, field_list),
                                               (STRUCTleft, SEMIright)))
           | STRUCT TYPE LBRACE field_list RBRACE SEMI
                                        (markg (A.Struct (TYPE, field_list),
                                               (STRUCTleft, SEMIright)))

field      : typ IDENT SEMI             (typ, IDENT)
           | typ TYPE SEMI              (typ, TYPE)
           | typfun SEMI                (typfun)

field_list :                            ([])
           | field field_list           (field :: field_list)

block      : LBRACE stmts RBRACE        (stmts)

typ        : INT                        (A.INT)
           | BOOL                       (A.BOOL)
           | TYPE                       (A.TYPEDEF TYPE)
           | typ STAR                   (A.PTR typ)
           | typ LBRACKET RBRACKET      (A.ARRAY typ)
           | STRUCT IDENT               (A.STRUCT IDENT)
           | STRUCT TYPE                (A.STRUCT TYPE)
           | typ LPAREN STAR RPAREN typfun_list (A.PTR (A.FUN (typ, typfun_list)))

typfun_list_follow :                              ([])
                   | COMMA typ typfun_list_follow (typ :: typfun_list_follow)

typfun_list : LPAREN RPAREN                        ([])
            | LPAREN typ typfun_list_follow RPAREN (typ :: typfun_list_follow)

typfun     : typ LPAREN STAR IDENT RPAREN typfun_list
                                        (A.PTR (A.FUN (typ, typfun_list)), IDENT)
           | typ LPAREN IDENT RPAREN typfun_list
                                        (A.FUN (typ, typfun_list), IDENT)

decl       : typ IDENT                  (gendecl (typ, IDENT) NONE)
           | typfun                     (gendecl typfun NONE)
           | typ IDENT ASSIGN exp       (gendecl (typ, IDENT) (SOME exp))
           | typfun ASSIGN exp          (gendecl typfun (SOME exp))

stmts      :                                 (A.Nop)
           | stmt stmts                      (A.Seq (stmt, stmts))

stmt       : simp SEMI                  (marks (simp, (simpleft, simpright)))
           | control                    (marks (control, (controlleft,
                                                          controlright)))
           | block                      (marks (block, (blockleft, blockright)))

simp       : simpnodef    (simpnodef)
           | decl         (decl)

simpnodef  : exp asnop exp %prec ASNOP
                                         (A.Assign (exp1, asnop, exp2))
           | STAR simppostop %prec UNARY (genptrinc simppostop)
           | simppostop %prec UNARY      (genpost simppostop)
           | exp                         (A.Express exp)

simppostop : expnostar postop %prec UNARY    (expnostar, SOME postop)

simpopt    :                           (A.Nop)
           | simp                      (marks (simp, (simpleft, simpright)))

step       :                           (A.Nop)
           | simpnodef                 (marks (simpnodef,
                                               (simpnodefleft, simpnodefright)))

elseopt    :                           (A.Nop)
           | ELSE stmt                 (marks (stmt, (ELSEleft, stmtright)))

control    : IF LPAREN exp RPAREN stmt elseopt  (A.If(exp, stmt, elseopt))
           | WHILE LPAREN exp RPAREN stmt       (A.While (exp, stmt))
           | FOR LPAREN simpopt SEMI exp SEMI step RPAREN stmt
                                      (A.For (simpopt, exp, step, stmt))
           | CONTINUE SEMI                      (A.Continue)
           | BREAK SEMI                         (A.Break)
           | RETURN exp SEMI                    (A.Return exp)

arg_list_follow :                               ([])
                | COMMA exp arg_list_follow     (exp::arg_list_follow)

arg_list   : LPAREN RPAREN                      ([])
           | LPAREN exp arg_list_follow RPAREN  (exp::arg_list_follow)

exp        : STAR exp                   (mark (A.Deref (exp, ref A.NULL),
                                              (STARleft, expright)))
           | expnostar                  (expnostar)

expnostar  : IDENT                      (mark (A.Var IDENT,
                                                (IDENTleft, IDENTright)))
           | LPAREN exp RPAREN          (exp)
           | INTCONST                   (mark (A.Const(INTCONST),
                                               (INTCONSTleft,INTCONSTright)))
           | TRUE                       (mark (A.Bool(true),
                                               (TRUEleft, TRUEright)))
           | FALSE                      (mark (A.Bool(false),
                                               (FALSEleft, FALSEright)))
           | NULL                       (mark (A.Null, (NULLleft, NULLright)))
           | unop exp %prec UNARY       (mark (A.UnaryOp(unop, exp),
                                               (unopleft, expright)))
           | exp exp2                   (convert_exp2 (exp, expleft) exp2)
           | exp arg_list               (mark (A.Call (exp, arg_list,
                                                       ref (A.NULL, [])),
                                              (expleft, arg_listright)))
           | exp PERIOD IDENT           (mark (A.Field (exp, IDENT, ref A.NULL),
                                              (expleft, IDENTright)))
           | exp PERIOD TYPE            (mark (A.Field (exp, TYPE, ref A.NULL),
                                              (expleft, TYPEright)))
           | exp ARROW IDENT            (mark ((A.Field (A.Deref (exp,
                                                                  ref A.NULL),
                                                         IDENT,
                                                         ref A.NULL)),
                                              (expleft, IDENTright)))
           | exp ARROW TYPE             (mark ((A.Field (A.Deref (exp,
                                                                  ref A.NULL),
                                                         TYPE,
                                                         ref A.NULL)),
                                              (expleft, TYPEright)))
           | ALLOC LPAREN typ RPAREN    (mark (A.Alloc typ,
                                              (ALLOCleft, RPARENright)))
           | ALLOCARR LPAREN typ COMMA exp RPAREN
                                        (mark (A.AllocArray (typ, exp),
                                              (ALLOCARRleft, RPARENright)))
           | exp LBRACKET exp RBRACKET (mark (A.ArrSub (exp1, exp2, ref A.NULL),
                                              (exp1left, RBRACKETright)))

exp2       : PLUS exp         (SOME(A.PLUS), exp, NONE, expright)
           | MINUS exp        (SOME(A.MINUS), exp, NONE, expright)
           | STAR exp         (SOME(A.TIMES), exp, NONE, expright)
           | SLASH exp        (SOME(A.DIVIDEDBY), exp, NONE, expright)
           | PERCENT exp      (SOME(A.MODULO), exp, NONE, expright)
           | LESS exp         (SOME(A.LESS), exp, NONE, expright)
           | LESSEQ exp       (SOME(A.LESSEQ), exp, NONE, expright)
           | GREATER exp      (SOME(A.GREATER), exp, NONE, expright)
           | GREATEREQ exp    (SOME(A.GREATEREQ), exp, NONE, expright)
           | EQUALS exp       (SOME(A.EQUALS), exp, NONE, expright)
           | NEQUALS exp      (SOME(A.NEQUALS), exp, NONE, expright)
           | ANDAND exp       (SOME(A.LAND), exp, NONE, expright)
           | PIPEPIPE exp     (SOME(A.LOR), exp, NONE, expright)
           | AND exp          (SOME(A.BAND), exp, NONE, expright)
           | CARET exp        (SOME(A.XOR), exp, NONE, expright)
           | PIPE exp         (SOME(A.BOR), exp, NONE, expright)
           | LSHIFT exp       (SOME(A.LSHIFT), exp, NONE, expright)
           | RSHIFT exp       (SOME(A.RSHIFT), exp, NONE, expright)
           | QUESTION exp COLON exp     (NONE, exp1, SOME exp2, exp2right)

asnop      : ASSIGN                     (NONE)
           | PLUSEQ                     (SOME(A.PLUS))
           | MINUSEQ                    (SOME(A.MINUS))
           | STAREQ                     (SOME(A.TIMES))
           | SLASHEQ                    (SOME(A.DIVIDEDBY))
           | PERCENTEQ                  (SOME(A.MODULO))
           | ANDEQ                      (SOME(A.BAND))
           | XOREQ                      (SOME(A.XOR))
           | OREQ                       (SOME(A.BOR))
           | LSHIFTEQ                   (SOME(A.LSHIFT))
           | RSHIFTEQ                   (SOME(A.RSHIFT))

unop       : BANG                       (A.BANG)
           | TILDE                      (A.INVERT)
           | MINUS                      (A.NEGATIVE)

postop     : PLUSPLUS                   (A.PLUS)
           | MINUSMINUS                 (A.MINUS)
