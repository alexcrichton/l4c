//test return 10
// a completely useless and contrived test

class Base {
public:
  // we're way too hardcore for arrays...
  int num0;
  int num1;
  int num2;
  int num3;
  int num4;
  int num5;
  int num6;
  int num7;
  int num8;
  int num9;

  Base(int start, int delta);
  int start();
  int delta();
  int result();
};

class Sum extends Base {
public:
  Sum(int start, int delta);
  int result();
};

class Product extends Base {
public:
  Product(int start, int delta);
  int result();
};

Base::Base(int start, int delta) {
  num0 = start;
  num1 = start + delta;
  num2 = start + delta * 2;
  num3 = start + delta * 3;
  num4 = start + delta * 4;
  num5 = start + delta * 5;
  num6 = start + delta * 6;
  num7 = start + delta * 7;
  num8 = start + delta * 8;
  num9 = start + delta * 9;
}

int Base::start() {
  return num0;
}

int Base::delta() {
  return num1 - num0;
}

int Base::result() {
  return start();
}

Sum::Sum(int start, int delta) {
  super(start, delta);
}

int Sum::result() {
  return super() + num1 + num2 + num3 + num4 +
         num5 + num6 + num7 + num8 + num9;
}

Product::Product(int start, int delta) {
  super(start, delta);
}

int Product::result() {
  return super() * num1 * num2 * num3 * num4 *
         num5 * num6 * num7 * num8 * num9;
}

int stuff(Base b1, Base b2) {
  return b2.result() / b1.result() / (b2.delta() - b1.delta());
}

int main() {
  Base sum = new Sum(10, 5);
  Base prod = new Product(5, 10);
  return stuff(sum, prod);
}
