//test return 100

class Foo {
 public:
  int foo;
  int foo();
  int same();
  int duplicate();
  int duplicate2(int k);
  Foo();
};

Foo::Foo() {}
int Foo::foo() { return foo; }
int Foo::same() { return foo + 100; }
int Foo::duplicate() { return foo; }
int Foo::duplicate2(int k) { return k * k; }

class Bar extends Foo {
 public:
  int bar;
  int bar();
  Bar();
};

Bar::Bar() {}
int Bar::bar() { return this->foo() + bar; }
int Bar::duplicate() { return super() + bar; }
int Bar::duplicate2(int k) { return super(k) + k; }

class Baz extends Bar {
 public:
  int baz;
  int baz();
  int same();
  Baz();
};

Baz::Baz() {}
int Baz::baz() { return this->bar() + baz; }
int Baz::same() { return baz; }
int Baz::duplicate() { return super() + baz; }
int Baz::duplicate2(int k) { return super(k) + 10; }

int main() {
  Baz *b1 = new Baz();
  Bar *b2 = b1;
  Foo *b3 = b1;
  b1->baz = 10;
  b1->bar = 9;
  b1->foo = 8;
  if (b3->foo() != 8) return 0;
  if (b2->bar() != 17) return 1;
  if (b1->baz() != 27) return 2;
  if (b3->foo != 8) return 3;
  if (b2->bar != 9) return 4;
  if (b1->baz != 10) return 5;
  if (b3->same() != 10) return 6;
  if (b2->same() != 10) return 7;
  if (b1->same() != 10) return 8;
  if (b3->duplicate() != 27) return 9;
  if (b2->duplicate() != 27) return 10;
  if (b1->duplicate() != 27) return 11;
  if (b3->duplicate2(4) != 30) return 12;
  if (b2->duplicate2(5) != 40) return 13;
  if (b1->duplicate2(6) != 52) return 14;
  return 100;
}
