//test return 100
// exercise some super functionality

class Foo {
 public:
  Foo();
  int f1();
};

Foo::Foo() {}
int Foo::f1() { return 1; }

class Bar extends Foo {
 public:
  int f1();
  int f2();
  Bar();
};

Bar::Bar() {}
int Bar::f1() { return super() + 1; }
int Bar::f2() { return super->f1() + 2; }

class Baz extends Bar {
 public:
  Baz();
  int f1();
  int f2();
  int f3();
};

Baz::Baz() {}
int Baz::f1() { return super() + 1; }
int Baz::f2() { return super() + 2; }
int Baz::f3() { return super->f1() + super->f2() + this->f1() + this->f2() + 3; }

int main() {
  Foo *foo = new Foo();
  Bar *bar = new Bar();
  Baz *baz = new Baz();

  if (foo->f1() != 1) return 1;
  if (bar->f1() != 2) return 2;
  if (bar->f2() != 3) return 3;
  if (baz->f1() != 3) return 4;
  if (baz->f2() != 5) return 5;
  if (baz->f3() != 16) return 6;

  return 100;
}
