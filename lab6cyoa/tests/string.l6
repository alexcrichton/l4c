//test return 0

class String {
private:
  int length;
  int[] bytes;

  String* clone(int length);
  bool subEquals(String *other, int start1, int len1, int start2, int len2);

public:
  String(int length);

  bool print();

  bool setChar(int ch, int index);

  bool equals(String *other);
  bool contains(String *sub);
  bool startsWith(String *prefix);
  bool endsWith(String *suffix);

  int length();
  int charAt(int index);
  int compareTo(String *other);
  int indexOf(int ch, int index);

  String* concat(String *other);
  String* sub(int start);
  String* substr(int start, int len);
  String* toLowerCase();
  String* toUpperCase();
  String* trim();
};

String* String::clone(int len) {
  String *newstr = new String(len);
  int limit = length < len ? length : len;
  for (int i = 0; i < limit; i++)
    newstr->setChar(bytes[i], i);
  return newstr;
}

String::String(int len) {
  length = len;
  bytes = alloc_array(int, len);
}

bool String::print() {
  for (int i = 0; i < length; i++)
    printchar(bytes[i]);
  return true;
}

bool String::setChar(int ch, int index) {
  if (index < 0 || index >= length)
    return false;
  bytes[index] = ch;
  return true;
}

bool String::equals(String *other) {
  return this->subEquals(other, 0, length, 0, other->length());
}

bool String::contains(String *sub) {
  int sublen = sub->length();
  for (int i = 0; i <= length - sublen; i++) {
    if (this->subEquals(sub, i, sublen, 0, sublen))
      return true;
  }
  return false;
}

bool String::startsWith(String *prefix) {
  int len = prefix->length();
  return this->subEquals(prefix, 0, len, 0, len);
}

bool String::endsWith(String *suffix) {
  int len = suffix->length();
  return this->subEquals(suffix, length - len, len, 0, len);
}

int String::length() {
  return length;
}

int String::charAt(int index) {
  if (index < 0 || index >= length)
    return -1;
  return bytes[index];
}

int String::compareTo(String *other) {
  int len = length;
  int len2 = other->length();
  int limit = len < len2 ? len : len2;
  for (int i = 0; i < limit; i++) {
    int diff = bytes[i] - other->charAt(i);
    if (diff == 0)
      continue;
    return diff;
  }
  if (len > len2)
    return 1;
  if (len < len2)
    return -1;
  return 0;
}

int String::indexOf(int ch, int index) {
  if (index < 0 || index >= length)
    return -1;
  for (int i = index; i < length; i++) {
    if (bytes[i] == ch)
      return i;
  }
  return -1;
}

String* String::concat(String *other) {
  String *newstr = this->clone(length + other->length());
  for (int i = 0; i < other->length(); i++)
    newstr->setChar(other->charAt(i), length + i);
  return newstr;
}

String* String::sub(int start) {
  return this->substr(start, length - start);
}

String* String::substr(int start, int len) {
  if (start < 0 || start >= length || len < 0 || start + len >= length)
    return NULL;
  String *newstr = this->clone(len);
  for (int i = start; i < start + len; i++)
    newstr->setChar(i - start, bytes[i]);
  return newstr;
}

String* String::toLowerCase() {
  // TODO
  return this;
}

String* String::toUpperCase() {
  // TODO
  return this;
}

String* String::trim() {
  // TODO
  return this;
}
