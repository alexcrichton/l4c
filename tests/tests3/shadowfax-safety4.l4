//test exception
//struct address


struct gg {
  int k;
};

struct anint {
   struct gg* hi;
};

typedef struct seed* seed;
struct large {
   struct anint* a;
   struct anint* aa;
   struct anint* aaa;
   struct anint* aaaa;
   struct anint* aaaaa;
   struct anint* aaaaaa;
   struct anint* b;
   struct anint* ab;
   struct anint* abb;
   struct anint* abbb;
   struct anint* abbbb;
   struct anint* abbbbb;
   struct anint* abbbbbb;
   struct anint* aw;
   struct anint* aww;
   struct anint* awww;
   struct anint* awwww;
   struct anint* awwwww;
   struct anint* awwwwww;
   struct anint* awwwwwww;
};


struct seed {
    seed next;
    struct large l;
    int numba;
};


seed init_seed(int n) {

     seed start = alloc(struct seed);
     seed next = start;
     while (n > 0) {
       seed temp = alloc(struct seed);
       next->next = temp;
       next->numba = n;
       n--;
       next = temp;
     }
     return start;
}


int*[]* initialize(int n, seed x) {

        int*[]* array_ptr = alloc(int*[]);
        *array_ptr = alloc_array(int*, n);

        for(int i = 0; i < n; i++) {
            (*array_ptr)[i] = alloc(int);
            *(*array_ptr)[i] = x->numba;
            x = x->next;
        }
        return array_ptr;
}



int main() {

    int ret = 0;
    seed dat_seed = init_seed(100);
    int*[]* array = initialize(100,dat_seed);
    for(int i = 0; i<100; i++) {
        ret += *(*array)[i];
    }
    return dat_seed->next->next->next->l.a->hi->k;
}