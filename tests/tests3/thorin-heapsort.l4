//test return 38

struct heap {
    int size;
    int[] heap;
};

typedef struct heap heap;

bool insert(heap *h, int val)
{
    int loc = h->size;
    while (loc > 0 && h->heap[(loc-1) >> 1] > val) {
        h->heap[loc] = h->heap[(loc-1) >> 1];
        loc = (loc-1) >> 1;
    }
    h->heap[loc] = val;
    h->size++;
    return true;
}

int remove(heap *h)
{
    int retval = h->heap[0];
    h->size--;
    int val = h->heap[h->size];
    int loc = 0;
    while (loc * 2 + 1 < h->size) {
        int a = loc * 2 + 1;
        if (a + 1 < h->size && h->heap[a] > h->heap[a+1]) {
            a++;
        }
        if (h->heap[a] >= val) {
            break;
        }
        h->heap[loc] = h->heap[a];
        loc = a;
    }
    h->heap[loc] = val;
    return retval;
}


int main()
{
    heap *h = alloc(heap);
    int num_entries = readint();
    h->heap = alloc_array(int, num_entries);

    for (int i = 0; i < num_entries; i++) {
        insert(h, readint());
    }
    for (int i = 0; i < num_entries; i++) {
        printint(remove(h));
        printchar(32);
    }
    return num_entries;
}


/* Local Variables: */
/* mode: c          */
/* End:             */
